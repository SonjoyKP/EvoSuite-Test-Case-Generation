/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 02:26:34 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("org.jsoup.select.Evaluator$IndexLessThan");
      boolean boolean0 = whitelist_Protocol0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("&r`Q#A;#ot@Tx");
      boolean boolean0 = whitelist_AttributeValue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jsoup.nodes.DocumentType";
      stringArray0[1] = "org.jsoup.nodes.DocumentType";
      stringArray0[2] = "org.jsoup.nodes.DocumentType";
      stringArray0[3] = "org.jsoup.nodes.DocumentType";
      stringArray0[4] = "org.jsoup.nodes.DocumentType";
      Whitelist whitelist1 = whitelist0.addProtocols("org.jsoup.nodes.DocumentType", "org.jsoup.nodes.DocumentType", stringArray0);
      whitelist1.preserveRelativeLinks(true);
      whitelist0.addAttributes("org.jsoup.nodes.DocumentType", stringArray0);
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.DocumentType", "org.jsoup.nodes.DocumentType");
      boolean boolean0 = whitelist0.isSafeAttribute("org.jsoup.nodes.DocumentType", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan");
      Document document0 = Document.createShell("blockquote");
      Attribute attribute0 = new Attribute("org.jsoup.select.Evaluator$IndexLessThan", (String) null, attributes0);
      boolean boolean0 = whitelist1.isSafeAttribute("org.jsoup.select.Evaluator$IndexLessThan", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jsoup.nodes.DocumentType";
      stringArray0[1] = "org.jsoup.nodes.DocumentType";
      stringArray0[2] = "org.jsoup.nodes.DocumentType";
      stringArray0[3] = "org.jsoup.nodes.DocumentType";
      stringArray0[4] = "org.jsoup.nodes.DocumentType";
      whitelist0.addProtocols("org.jsoup.nodes.DocumentType", "(*$A\"i4t>_T_sJ", stringArray0);
      whitelist0.addAttributes("org.jsoup.nodes.DocumentType", stringArray0);
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.DocumentType", "org.jsoup.nodes.DocumentType");
      boolean boolean0 = whitelist0.isSafeAttribute("org.jsoup.nodes.DocumentType", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "main";
      stringArray0[1] = "uJ@H&!";
      stringArray0[2] = "org.jsoup.nodes.DocumentType";
      stringArray0[3] = "main";
      stringArray0[4] = "main";
      whitelist0.addAttributes("main", stringArray0);
      Element element0 = new Element("org.jsoup.nodes.DocumentType");
      Attribute attribute0 = Attribute.createFromEncoded("main", "uJ@H&!");
      boolean boolean0 = whitelist0.isSafeAttribute("main", element0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Document document0 = Document.createShell("sup");
      Attribute attribute0 = Attribute.createFromEncoded("sup", "cite");
      boolean boolean0 = whitelist0.isSafeAttribute("ol", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"E";
      stringArray0[1] = "\"E";
      stringArray0[2] = "\"E";
      stringArray0[3] = "\"E";
      stringArray0[4] = "\"E";
      stringArray0[5] = "\"E";
      stringArray0[6] = "\"E";
      stringArray0[7] = "\"E";
      whitelist0.addTags(stringArray0);
      boolean boolean0 = whitelist0.isSafeTag("\"E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      boolean boolean0 = whitelist0.isSafeTag("org.jsoup.select.Evaluator$IndexLessThan");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("a", "[9i", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[1] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[2] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[3] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[4] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[5] = "org.jsoup.select.Evaluator$IndexLessThan";
      Whitelist whitelist1 = whitelist0.addProtocols("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      Whitelist whitelist2 = whitelist1.removeProtocols("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("NxvKf.oWQB5'tDd%n", "rSo{", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      stringArray0[2] = "E";
      stringArray0[3] = "E";
      stringArray0[4] = "E";
      stringArray0[5] = "E";
      stringArray0[6] = "E";
      stringArray0[7] = "E";
      stringArray0[8] = "?j*`#Mc>5";
      whitelist0.addProtocols("E", "E", stringArray0);
      Whitelist whitelist1 = whitelist0.addProtocols("E", "E", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[1] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[2] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[3] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[4] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[5] = "org.jsoup.select.Evaluator$IndexLessThan";
      Whitelist whitelist1 = whitelist0.addProtocols("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      whitelist1.addProtocols("org.jsoup.select.Evaluator$IndexLessThan", "-;61I/^FNDG[ySt1`s!", stringArray0);
      Whitelist whitelist2 = whitelist1.removeProtocols("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("main", "main", "uJ@H&!");
      Whitelist whitelist2 = whitelist0.removeEnforcedAttribute("main", "org.jsoup.nodes.DocumentType");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("dd", "dd", "dd");
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("dd", "dd");
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W@IQQpxG^{FC";
      stringArray0[1] = "V?xC;FdqW@}cAc0";
      stringArray0[2] = "W@IQQpxG^{FC";
      Whitelist whitelist1 = whitelist0.addAttributes("li", stringArray0);
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("li", "W@IQQpxG^{FC");
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("nth-child", "org.jsoup.select.Evaluator$IndexLessThan");
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan");
      Whitelist whitelist2 = whitelist0.addEnforcedAttribute("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "AfterDoctypeName";
      stringArray0[1] = "href";
      stringArray0[2] = "style";
      stringArray0[3] = "em";
      stringArray0[4] = "mailto";
      Whitelist whitelist1 = whitelist0.addAttributes("AfterDoctypeName", stringArray0);
      Whitelist whitelist2 = whitelist1.removeAttributes(":all", stringArray0);
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "AfterDoctypeName";
      stringArray0[1] = "href";
      stringArray0[2] = "style";
      stringArray0[3] = "em";
      stringArray0[4] = "mailto";
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[1] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[2] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[3] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[4] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[5] = "org.jsoup.select.Evaluator$IndexLessThan";
      Whitelist whitelist1 = whitelist0.addAttributes("org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      Whitelist whitelist2 = whitelist1.removeAttributes("org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "h6";
      stringArray0[1] = "h6";
      stringArray0[2] = "h6";
      stringArray0[3] = "h6";
      Whitelist whitelist1 = whitelist0.removeAttributes("h6", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bdi";
      stringArray0[1] = "bdi";
      Whitelist whitelist1 = whitelist0.removeAttributes("bdi", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bdi";
      stringArray0[1] = "bdi";
      whitelist0.addAttributes("bdi", stringArray0);
      Whitelist whitelist1 = whitelist0.addAttributes("bdi", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bdi";
      stringArray0[1] = "bdi";
      whitelist0.addAttributes("bdi", stringArray0);
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[1] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[2] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[3] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[4] = "org.jsoup.select.Evaluator$IndexLessThan";
      stringArray0[5] = "org.jsoup.select.Evaluator$IndexLessThan";
      Whitelist whitelist1 = whitelist0.addAttributes("org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      whitelist1.addProtocols("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan", stringArray0);
      Attributes attributes0 = whitelist0.getEnforcedAttributes("");
      Document document0 = Document.createShell("blockquote");
      Attribute attribute0 = new Attribute("org.jsoup.select.Evaluator$IndexLessThan", (String) null, attributes0);
      boolean boolean0 = whitelist1.isSafeAttribute("org.jsoup.select.Evaluator$IndexLessThan", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("strike", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Document document0 = Document.createShell("Z#j!IaQPU");
      Attribute attribute0 = new Attribute("HgYP2[q+ex(0;%FBM", "Z#j!IaQPU");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("Z#j!IaQPU", "b", "7JdMM`/NE");
      boolean boolean0 = whitelist1.isSafeAttribute("Z#j!IaQPU", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("yv`-sp!*x.", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W@IQQpxG^{FC";
      stringArray0[1] = "V?xC;FdqW@}cAc0";
      stringArray0[2] = "W@IQQpxG^{FC";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "li";
      stringArray1[1] = "li";
      stringArray1[2] = "li";
      whitelist0.addAttributes("li", stringArray0);
      stringArray1[3] = "li";
      stringArray1[4] = "li";
      stringArray1[5] = "li";
      stringArray1[6] = "li";
      Whitelist whitelist1 = whitelist0.removeAttributes("li", stringArray1);
      assertSame(whitelist0, whitelist1);
  }
}
