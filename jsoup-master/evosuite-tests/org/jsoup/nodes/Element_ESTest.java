/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 01:59:57 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Document document1 = document0.clone();
      document0.prependChild(document1);
      document0.getElementsByAttributeValueStarting("#root", "b");
      document1.clone();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("7ZRhfyM-p+tidZ,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
      assertEquals("7ZRhfyM-p+tidZ,", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 8204, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      String string0 = document0.toString();
      assertEquals("#root", document0.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Document document1 = document0.clone();
      document0.prependChild(document1);
      document0.getElementsByAttributeValueStarting("#root", "b");
      MockFileWriter mockFileWriter0 = new MockFileWriter("hMt\n(I5{");
      document1.html(mockFileWriter0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document(" > ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Element element0 = document0.createElement("textarea");
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 124, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("");
      CharBuffer charBuffer0 = CharBuffer.allocate(2124);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(charBuffer0, 2124, document_OutputSettings0);
      assertEquals(7, charBuffer0.position());
      assertEquals(2117, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document(" > ");
      Element element0 = document0.val("textarea");
      assertEquals(" > ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x4JSQ/{|");
      CDataNode cDataNode0 = new CDataNode("x4JSQ/{|");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "x4JSQ/{|", attributes0);
      pseudoTextElement0.val();
      assertEquals("x4JSQ/{|", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.toggleClass("0C0T+");
      assertEquals("YzN", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.addClass("YzN");
      document0.addClass("");
      document0.hasClass("K$[7@Ub");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.addClass("YzN");
      document0.addClass("<html>\n <head></head>\n <body></body>\n</html>");
      boolean boolean0 = document0.hasClass("!ka8,-");
      assertFalse(boolean0);
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.addClass("YzN");
      document0.addClass("<html>\n <head></head>\n <body></body>\n</html>");
      document0.hasClass("K$[7@Ub");
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.addClass("YzN");
      document0.addClass(":%s(%d)");
      boolean boolean0 = element0.hasClass("java.lang.String@0000000043 :%s(%d)");
      assertFalse(boolean0);
      assertEquals("YzN", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.addClass("YzN");
      boolean boolean0 = element0.hasClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("YzN", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x4JSQ/{|");
      CDataNode cDataNode0 = new CDataNode("x4JSQ/{|");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "x4JSQ/{|", attributes0);
      Element element0 = pseudoTextElement0.prependChild(cDataNode0);
      String string0 = element0.data();
      assertEquals("x4JSQ/{|", element0.baseUri());
      assertEquals("x4JSQ/{|", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.prepend("BTO9");
      element0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("QxEW*jCm^C#'aouK");
      Element element0 = document0.text(" ");
      boolean boolean0 = element0.hasText();
      assertEquals("QxEW*jCm^C#'aouK", element0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Document document1 = document0.clone();
      Element element0 = document0.prependChild(document1);
      document0.title("(");
      boolean boolean0 = element0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      boolean boolean0 = Element.preserveWhitespace(cDataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document(" > ");
      Element element0 = document0.createElement("textarea");
      element0.val("textarea");
      element0.val();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthLastOfType");
      DataNode dataNode0 = new DataNode("/X'*6", "/X'*6");
      Element element0 = document0.prependChild(dataNode0);
      Pattern pattern0 = Pattern.compile("am");
      element0.getElementsMatchingOwnText(pattern0);
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.prepend("BTO9");
      document0.ownText();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.prepend("BTO9");
      document0.wholeText();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("diV");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("diV");
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsMatchingText("diV");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("]<u6:T\"L_jPF]7~!i_S");
      element0.html(" ");
      element0.getElementsContainingText("]<u6:T\"L_jPF]7~!i_S");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.getElementById(";");
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("xmAA6nB5Gz?Y");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals("xmAA6nB5Gz?Y", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.addClass("YzN");
      element0.parentNode = (Node) document0;
      Element element1 = element0.lastElementSibling();
      assertEquals("YzN", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document(" iT=Md");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.firstElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.addClass("YzN");
      element0.parentNode = (Node) document0;
      Element element1 = document0.firstElementSibling();
      assertNull(element1);
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("qR^Egpuywg(D@4Q");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("</");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document(" iT=Md");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("D&Tn{hfk{x$!4@n");
      document0.nextElementSibling();
      assertEquals("D&Tn{hfk{x$!4@n", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.addClass("YzN");
      element0.parentNode = (Node) document0;
      Element element1 = document0.nextElementSibling();
      assertEquals("YzN", document0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.prependChild(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("v,6I>F`KP5h['A");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("v,6I>F`KP5h['A", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.addClass("YzN");
      element0.parentNode = (Node) document0;
      document0.cssSelector();
      assertEquals("YzN", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", string0);
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Element element0 = new Element(tag0, "html");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        element0.insertChildren((-3011), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthLastOfType");
      Node[] nodeArray0 = document0.childNodesAsArray();
      // Undeclared exception!
      try { 
        document0.insertChildren(27, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-158), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("Unxpected character '%s' in inpt state [%s]");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) linkedHashSet0);
      assertEquals("Unxpected character '%s' in inpt state [%s]", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("qR^Egpuywg(D@4Q");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(58, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthLastOfType");
      DataNode dataNode0 = new DataNode("/X'*6", "/X'*6");
      Element element0 = document0.prependChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.prepend("BTO9");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Element element0 = document0.prepend("BTO9");
      Elements elements0 = element0.getElementsByIndexLessThan(790);
      assertEquals(2, document0.childNodeSize());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsFirstOfType");
      Element element0 = document0.head();
      Elements elements0 = element0.parents();
      assertEquals(1, elements0.size());
      assertEquals("org.jsoup.select.Evaluator$IsFirstOfType", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1053));
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("'j*C");
      // Undeclared exception!
      try { 
        document0.selectFirst("Insert position out of bounds.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsFirstOfType");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("v,6I>F`KP5h['A");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("v,6I>F`KP5h['A", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsOnlyOfType");
      // Undeclared exception!
      try { 
        document0.before("org.jsoup.select.Evaluator$IsOnlyOfType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.getElementsByAttribute("hMt\n(I5{");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.getElementsByAttributeValueNot("qQRVsMTv", "Y");
      assertEquals("YzN", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("z?D]sn(bn?[,");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("z?D]sn(bn?[,", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.doSetBaseUri("YzN");
      assertEquals(1, document0.childNodeSize());
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsFirstOfType");
      document0.getElementsByAttributeValueContaining("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      assertEquals("org.jsoup.select.Evaluator$IsFirstOfType", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("z?D]sn(bn?[,");
      Elements elements0 = document0.getElementsByClass("VoD&P|+Z(Vo 5VoU");
      assertEquals("z?D]sn(bn?[,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthLastOfType");
      document0.getElementsByAttributeValueEnding("/X'*6", ":gt(%d)");
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("qR^Egpuywg(D@4Q");
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("qR^Egpuywg(D@4Q");
      boolean boolean0 = document0.is((Evaluator) evaluator_Id0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document(" iT=Md");
      document0.getElementsByAttributeValueMatching("#root", "#root");
      assertEquals(" iT=Md", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      Elements elements0 = document0.getElementsByIndexEquals((-651));
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Element element0 = new Element("l:");
      Elements elements0 = element0.getElementsByAttributeStarting("l:");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("v,6I>F`KP5h['A");
      // Undeclared exception!
      try { 
        document0.after("class");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      document0.getElementsMatchingOwnText("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      document0.getElementsByAttributeValue("org.jsoup.nodes.Element", " />");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("ob,pA");
      Element element0 = document0.attr("Cd3m(Zcss[3yGT&iX[", false);
      assertEquals("ob,pA", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("bQIod9'CawS@4tpR>`");
      CDataNode cDataNode0 = new CDataNode("bQIod9'CawS@4tpR>`");
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      Elements elements0 = document0.getElementsContainingOwnText("YzN");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("YzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("|");
      document0.dataset();
      assertEquals("|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Element element0 = document0.tagName("51$)TR#1");
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("YzN");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Document document1 = document0.clone();
      document0.prependChild(document1);
      document0.title("(");
      MockFileWriter mockFileWriter0 = new MockFileWriter("hMt\n(I5{");
      document1.html(mockFileWriter0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qL~[BiG@b{Oqneh1fdz");
      Element element0 = new Element(tag0, "qL~[BiG@b{Oqneh1fdz");
      // Undeclared exception!
      try { 
        element0.child(60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.prependElement("</");
      Element element1 = element0.html("</");
      element1.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.removeClass("");
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Element element0 = new Element(";7+OQ8fVuk^");
      element0.appendText("legend");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthLastOfType");
      document0.children();
      assertEquals("org.jsoup.select.Evaluator$IsNthLastOfType", document0.baseUri());
  }
}
