/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 01:56:50 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("        ");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("u9?V2~8h'");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("pMem+y@DV(%");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(charArrayWriter0, 1085, document_OutputSettings1);
      assertEquals("pMem+y@DV(%", charArrayWriter0.toString());
      assertEquals(11, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      textNode0.value = (Object) "";
      Tag tag0 = Tag.valueOf("Split offset must not be greater than current text length");
      Element element0 = new Element(tag0, "");
      textNode0.parentNode = (Node) element0;
      String string0 = textNode0.toString();
      assertEquals("", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("progress");
      Element element0 = new Element("progress");
      textNode0.parentNode = (Node) element0;
      String string0 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("progress", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      Tag tag0 = Tag.valueOf("Split offset must not be greater than current text length");
      Element element0 = new Element(tag0, "#text");
      textNode0.parentNode = (Node) element0;
      String string0 = textNode0.toString();
      assertEquals("\nSplit offset must not be greater than current text length", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "u9?V2~8h'");
      textNode0.setSiblingIndex((-444));
      textNode0.outerHtml();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("#7NkYCcf;bWTm:m");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead((Appendable) null, 10, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("HGEh[:x{k[_]`~&x");
      cDataNode0.reparentChild(cDataNode0);
      // Undeclared exception!
      try { 
        cDataNode0.splitText(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("HGEh[:x{k[_]`~&x");
      TextNode textNode0 = cDataNode0.splitText(0);
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("''Jx{@`f");
      // Undeclared exception!
      try { 
        textNode0.splitText(3363);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      // Undeclared exception!
      try { 
        textNode0.splitText((-766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode("", ";f%Fe'LTHc$83");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail((Appendable) null, (-1742), document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.text();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("n<Nj<g-_P^sQ+t[?F^");
      assertEquals("n<Nj<g-_P^sQ+t[?F^", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("~(QCP<z)sw]EJH'IT_");
      assertEquals("~(QCP<z)sw]EJH'IT_", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      textNode0.isBlank();
  }
}
